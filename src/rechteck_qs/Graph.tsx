import { ApexOptions } from "apexcharts";
import { useEffect } from "react";
import Chart from "react-apexcharts";
import { Beton } from "./Beton";
import { Spannstahl } from "./Spannstahl";
import { BaustahlConfig, calc, calc2, Einwirkung, Querschnitt, RefType, SpannstahlConfig } from "./math";
import { BaustahlList } from "./Baustahl";
import { SetStateAction } from "react";


const DUMMY_DATA = [[-345, 9266], [-171, 8842], [124, 8078], [549, 6945], [584, 6844], [619, 6742], [652, 6640], [685, 6537], [754, 6315], [816, 6104], [873, 5901], [925, 5706], [972, 5520], [1016, 5340], [1056, 5167], [1093, 5001], [1127, 4840], [1159, 4684], [1189, 4534], [1217, 4388], [1244, 4246], [1269, 4109], [1292, 3976], [1314, 3846], [1336, 3720], [1356, 3597], [1375, 3477], [1394, 3360], [1412, 3246], [1425, 3163], [1424, 3144], [1423, 3075], [1421, 3008], [1419, 2944], [1416, 2881], [1413, 2821], [1410, 2762], [1406, 2705], [1402, 2650], [1398, 2597], [1394, 2545], [1389, 2495], [1385, 2446], [1380, 2399], [1375, 2353], [1370, 2308], [1365, 2265], [1359, 2222], [1354, 2181], [1349, 2141], [1343, 2102], [1338, 2064], [1332, 2027], [1327, 1990], [1321, 1955], [1316, 1921], [1310, 1887], [1305, 1854], [1299, 1822], [1294, 1791], [1288, 1760], [1283, 1730], [1277, 1701], [1272, 1673], [1266, 1645], [1261, 1617], [1255, 1591], [1250, 1564], [1245, 1539], [1240, 1514], [1234, 1489], [1229, 1465], [1224, 1441], [1219, 1418], [1214, 1396], [1209, 1373], [1204, 1352], [1199, 1330], [1194, 1309], [1189, 1289], [1184, 1269], [1179, 1249], [1174, 1229], [1170, 1210], [1165, 1192], [1160, 1173], [1156, 1155], [1151, 1137], [1147, 1120], [1142, 1103], [1138, 1086], [1133, 1069], [1129, 1053], [1125, 1037], [1121, 1021], [1116, 1006], [1112, 991], [1108, 976], [1104, 961], [1100, 946], [1096, 932], [1092, 918], [1088, 904], [1084, 890], [1080, 877], [1076, 864], [1073, 851], [1069, 838], [1065, 825], [1061, 813], [1058, 800], [1054, 788], [1051, 776], [1047, 765], [1043, 753], [1040, 742], [1037, 730], [1033, 719], [1030, 708], [1026, 698], [1023, 687], [1020, 676], [1017, 666], [1013, 656], [1010, 646], [1007, 636], [1004, 626], [1001, 616], [998, 607], [995, 597], [992, 588], [989, 578], [986, 569], [983, 560], [980, 552], [977, 543], [974, 534], [971, 526], [968, 517], [966, 509], [963, 500], [960, 492], [957, 484], [955, 476], [952, 468], [949, 461], [947, 453], [944, 445], [942, 438], [939, 430], [937, 423], [934, 416], [932, 409], [929, 401], [927, 394], [924, 388], [922, 381], [920, 374], [917, 367], [915, 360], [913, 354], [910, 347], [908, 341], [906, 335], [903, 328], [901, 322], [899, 316], [897, 310], [895, 304], [893, 298], [890, 292], [888, 286], [886, 280], [884, 274], [882, 269], [880, 263], [878, 257], [876, 252], [874, 246], [872, 241], [870, 236], [868, 230], [866, 225], [864, 220], [862, 215], [860, 210], [859, 205], [857, 200], [855, 195], [853, 190], [851, 185], [849, 180], [848, 175], [846, 170], [844, 166], [842, 161], [841, 156], [839, 152], [837, 147], [836, 143], [834, 138], [832, 134], [831, 130], [829, 125], [827, 121], [826, 117], [824, 112], [822, 108], [821, 104], [819, 100], [818, 96], [816, 92], [815, 88], [813, 84], [811, 80], [810, 76], [808, 72], [807, 68], [806, 64], [804, 60], [803, 57], [801, 53], [800, 49], [798, 46], [797, 42], [795, 38], [794, 35], [793, 31], [791, 28], [790, 24], [789, 21], [787, 17], [786, 14], [784, 10], [783, 7], [782, 4], [781, 0], [779, -3], [778, -6], [777, -9], [775, -13], [774, -16], [773, -19], [772, -22], [770, -25], [769, -28], [768, -32], [767, -35], [765, -38], [764, -41], [763, -44], [762, -47], [761, -50], [759, -52], [758, -55], [757, -58], [756, -61], [755, -64], [754, -67], [743, -92], [733, -118], [722, -144], [711, -170], [700, -197], [689, -223], [677, -250], [666, -277], [654, -304], [642, -331], [630, -359], [618, -386], [606, -414], [593, -442], [580, -471], [567, -499], [554, -528], [541, -556], [528, -585], [515, -612], [502, -640], [490, -666], [477, -692], [466, -717], [454, -740], [444, -762], [434, -783], [425, -802], [416, -818], [409, -833], [403, -846], [398, -856], [394, -863], [392, -868], [391, -870], [391, -870], [391, -870], [237, -526], [219, -487], [200, -444], [179, -399], [157, -351], [134, -301], [109, -248], [84, -193], [58, -136], [31, -78], [3, -18], [-25, 43], [-54, 106], [-83, 170], [-112, 234], [-141, 296], [-170, 358], [-199, 422], [-228, 486], [-257, 549], [-285, 614], [-314, 678], [-343, 741], [-372, 805], [-400, 869], [-429, 933], [-457, 997], [-485, 1060], [-513, 1124], [-541, 1188], [-569, 1251], [-597, 1315], [-625, 1378], [-652, 1442], [-680, 1505], [-707, 1569], [-709, 1574], [-711, 1579], [-713, 1584], [-716, 1589], [-718, 1594], [-720, 1599], [-722, 1604], [-724, 1609], [-726, 1614], [-728, 1619], [-730, 1624], [-733, 1629], [-735, 1635], [-737, 1640], [-739, 1645], [-741, 1650], [-744, 1655], [-746, 1661], [-748, 1666], [-750, 1671], [-753, 1677], [-755, 1682], [-757, 1688], [-759, 1693], [-762, 1699], [-764, 1704], [-766, 1710], [-768, 1715], [-771, 1721], [-773, 1726], [-775, 1732], [-778, 1738], [-780, 1743], [-782, 1747], [-783, 1751], [-784, 1754], [-786, 1758], [-787, 1762], [-789, 1766], [-790, 1769], [-792, 1773], [-793, 1777], [-795, 1781], [-796, 1785], [-798, 1789], [-799, 1793], [-801, 1797], [-802, 1801], [-804, 1805], [-805, 1809], [-807, 1813], [-809, 1818], [-810, 1822], [-812, 1826], [-814, 1830], [-815, 1835], [-817, 1839], [-819, 1843], [-820, 1848], [-822, 1852], [-824, 1857], [-825, 1862], [-827, 1866], [-829, 1871], [-831, 1876], [-832, 1880], [-834, 1885], [-836, 1890], [-838, 1895], [-840, 1900], [-841, 1905], [-843, 1910], [-845, 1915], [-847, 1920], [-849, 1925], [-851, 1930], [-853, 1936], [-855, 1941], [-857, 1946], [-859, 1952], [-861, 1957], [-863, 1963], [-865, 1968], [-867, 1974], [-869, 1980], [-871, 1985], [-873, 1991], [-875, 1997], [-877, 2003], [-879, 2009], [-882, 2015], [-884, 2021], [-886, 2027], [-888, 2033], [-890, 2040], [-893, 2046], [-895, 2053], [-897, 2059], [-900, 2066], [-902, 2072], [-904, 2079], [-907, 2086], [-909, 2093], [-911, 2100], [-914, 2107], [-916, 2114], [-919, 2121], [-921, 2128], [-924, 2136], [-926, 2143], [-929, 2150], [-932, 2158], [-934, 2166], [-937, 2174], [-939, 2181], [-942, 2189], [-945, 2197], [-948, 2206], [-950, 2214], [-953, 2222], [-956, 2231], [-959, 2239], [-962, 2248], [-964, 2257], [-967, 2266], [-970, 2275], [-973, 2284], [-976, 2293], [-979, 2302], [-982, 2312], [-985, 2321], [-989, 2331], [-992, 2341], [-995, 2351], [-998, 2361], [-1001, 2371], [-1004, 2381], [-1008, 2392], [-1011, 2403], [-1014, 2413], [-1018, 2424], [-1021, 2436], [-1025, 2447], [-1028, 2458], [-1032, 2470], [-1035, 2482], [-1039, 2493], [-1042, 2506], [-1046, 2518], [-1050, 2530], [-1053, 2543], [-1057, 2556], [-1061, 2569], [-1065, 2582], [-1069, 2596], [-1073, 2609], [-1077, 2623], [-1081, 2637], [-1085, 2651], [-1089, 2666], [-1093, 2681], [-1097, 2696], [-1101, 2711], [-1105, 2726], [-1110, 2742], [-1114, 2758], [-1118, 2774], [-1123, 2791], [-1127, 2808], [-1131, 2825], [-1136, 2843], [-1141, 2860], [-1145, 2878], [-1150, 2897], [-1154, 2915], [-1159, 2935], [-1164, 2954], [-1169, 2974], [-1174, 2994], [-1178, 3015], [-1183, 3035], [-1188, 3057], [-1193, 3079], [-1198, 3101], [-1204, 3123], [-1209, 3147], [-1214, 3170], [-1219, 3194], [-1224, 3219], [-1230, 3244], [-1235, 3270], [-1240, 3296], [-1246, 3322], [-1251, 3350], [-1256, 3378], [-1262, 3406], [-1267, 3435], [-1273, 3465], [-1278, 3496], [-1284, 3527], [-1289, 3559], [-1295, 3592], [-1300, 3626], [-1306, 3660], [-1312, 3695], [-1317, 3732], [-1323, 3769], [-1328, 3807], [-1333, 3846], [-1339, 3886], [-1344, 3927], [-1349, 3970], [-1354, 4013], [-1359, 4058], [-1364, 4104], [-1369, 4151], [-1374, 4200], [-1378, 4250], [-1383, 4302], [-1387, 4355], [-1391, 4410], [-1395, 4467], [-1398, 4526], [-1401, 4586], [-1404, 4649], [-1406, 4713], [-1408, 4780], [-1409, 4849], [-1409, 4868], [-1410, 4921], [-1410, 4995], [-1409, 5072], [-1408, 5152], [-1406, 5235], [-1402, 5322], [-1398, 5411], [-1393, 5505], [-1386, 5602], [-1377, 5703], [-1367, 5809], [-1355, 5920], [-1341, 6035], [-1325, 6156], [-1306, 6283], [-1284, 6416], [-1258, 6555], [-1229, 6702], [-1195, 6856], [-1156, 7019], [-1112, 7191], [-1061, 7372], [-1036, 7458], [-1010, 7544], [-982, 7631], [-954, 7717], [-632, 8620], [-441, 9153], [-345, 9266]]

export interface GraphProps {
	beton: Beton,
	spannstahl: Spannstahl,
	A_s1: number,
	A_s2: number,
	d_1: number,
	d_2: number,
	E_p: number,
	A_p: number,
	d_p: number,
	b: number,
	h: number,
	N_Ed: number,
	M_Ed: number,
	set_M_Rd: React.Dispatch<SetStateAction<number>>
}


function makeSeries(props: GraphProps) {
	let data_points = calcData(props);

	// Interpolation
	let [M_bigger, N_smaller] = data_points[0];
	let [M_smaller, N_bigger] = data_points[1];
	for (let [M, N] of data_points) {
		if (N < props.N_Ed) {
			N_smaller = N;
			M_bigger = M;
			break;
		}
		N_bigger = N;
		M_smaller = M;
	}
	let diff = (N_smaller - props.N_Ed) / (N_smaller - N_bigger);
	let M_interpolated = M_bigger - diff * (M_bigger - M_smaller);
	props.set_M_Rd(M_interpolated);

	return [
		{
			name: "M-N-Interaktion",
			data: data_points
		}, {
			name: "Ed",
			data: [[props.M_Ed, props.N_Ed]]
		}, {
			name: "Rd",
			data: [[M_interpolated, props.N_Ed]]
		}
	];
}


function* getEpsilonSamplePoints(reverse: boolean = false): Generator<[number, number, RefType]> {
	const stepSize = 0.1;
	if (!reverse) {
		yield [-2, -2, RefType.H];
		yield [-2.5, -1.33, RefType.H];
		yield [-3.0, -0.67, RefType.H];
		yield [-3.5, 0, RefType.H];
		for (let e_s = 0; e_s < 25; e_s += stepSize) {
			yield [-3.5, e_s, RefType.D];
		}
		for (let e_c = -3.5; e_c < 25; e_c += stepSize) {
			yield [e_c, 25, RefType.D];
		}
	} else {
		for (let e_c = 25; e_c > -3.5; e_c -= stepSize) {
			yield [e_c, 25, RefType.D];
		}
		for (let e_s = 25; e_s > 0; e_s -= stepSize) {
			yield [-3.5, e_s, RefType.D];
		}
		yield [-3.5, 0, RefType.H];
		yield [-3.0, -0.67, RefType.H];
		yield [-2.5, -1.33, RefType.H];
		yield [-2, -2, RefType.H];
	}
}


function calcData(props: GraphProps): number[][] {
	let qs: Querschnitt = {
		b: props.b,
		h: props.h
	};
	let baustahlConfig: BaustahlConfig = {
		material: BaustahlList[0],
		A_s1: props.A_s1,
		A_s2: props.A_s2,
		d_1: props.d_1,
		d_2: props.d_2
	};
	let spannstahlConfig: SpannstahlConfig = {
		material: props.spannstahl,
		E_p: props.E_p,
		A_p: props.A_p,
		d_p: props.d_p,
	};
	let einwirkung: Einwirkung = {
		N_Ed: props.N_Ed,
		M_Ed: props.M_Ed
	}

	let data_points = [];
	for (const [e_c, e_s, reftype] of getEpsilonSamplePoints()) {
		let { N_Rd, M_Rd } = calc(e_c, e_s, reftype, qs, props.beton, baustahlConfig, spannstahlConfig, einwirkung)
		data_points.push([M_Rd, N_Rd])
	}
	for (const [e_c, e_s, reftype] of getEpsilonSamplePoints(true)) {
		let { N_Rd, M_Rd } = calc2(e_c, e_s, reftype, qs, props.beton, baustahlConfig, spannstahlConfig, einwirkung)
		data_points.push([M_Rd, N_Rd])
	}

	return data_points;
}


const graphOptions: ApexOptions = {
	chart: {
		id: "mninteraktion",
		type: "line",
		animations: {
			enabled: false,
		},
		toolbar: {
			show: false
		},
		zoom: {
			enabled: false,
		}
	},
	xaxis: {
		type: 'numeric',
		min: -2000,
		max: 2000,
		tickAmount: 12,
		decimalsInFloat: 0,
		title: {
			text: "Biegemoment M-Rd in [kNm]"
		},
	},
	yaxis: {
		tickAmount: 5,
		decimalsInFloat: 0,
		title: {
			text: "Normalkraft N-Rd in [kN]"
		},
	},
	stroke: {
		lineCap: 'round',
	},
	annotations: {
		yaxis: [
		  {
			y: 0,
			strokeDashArray: 0,
			borderColor: '#888',
			borderWidth: 1,
			opacity: 1
		  }
		],
		xaxis: [
		  {
			x: 0,
			strokeDashArray: 0,
			borderColor: '#888',
			borderWidth: 1,
			opacity: 1
		  }
		]
	},
	tooltip: {
		intersect: true,
		shared: false,
	},
	legend: {
		position: "top",
	},
	markers: {
		// size: 3,
		// strokeWidth: 0,
		// hover: {
		// 	size: 3,
		// },
		// discrete: [{
		// 	seriesIndex: 1,
		// 	dataPointIndex: 0,
		// 	fillColor: '#00e396',
		// 	strokeColor: '#fff',
		// 	size: 10,
		// 	shape: "circle",
		// }]
	},
	grid: {
		xaxis: {
			lines: {
				show: true,
			}
		},
		yaxis: {
			lines: {
				show: true,
			}
		},
	},
}

export default function Graph(props: GraphProps) {
	const initData = [{ data: [] }]

	useEffect(() => {
		setTimeout(() => {
			// Lazy loading
			ApexCharts.exec("mninteraktion", "updateSeries", makeSeries(props));
		}, 0);
	});

	return <Chart options={graphOptions} series={initData} type="line" />
}
